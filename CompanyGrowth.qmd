---
title: "Company Growth"
format: pdf
editor: visual
---

```{r setup}
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(tidyverse)
library(vroom)
library(zoo)
library(forecast)
library(splines)
library(prophet)
library(yardstick)

data <- vroom('CompanyGrowth.csv')
data <- data %>%
  mutate(date = as.Date(as.yearqtr(paste(Year, Qrtr, sep = "-"))))

```

## EDA

```{r}
# growth stays about the same throughout
ggplot(data=data, aes(x=date, y=PctGrowth)) +
  geom_point()
# Change in Income
ggplot(data=data, aes(x=Income, y=PctGrowth)) +
  geom_point()
# Change in Production
ggplot(data=data, aes(x=Production, y=PctGrowth)) +
  geom_point()
# Change in Savings
ggplot(data=data, aes(x=Savings, y=PctGrowth)) +
  geom_point()
# Change in Unemployment
ggplot(data=data, aes(x=Unemployment, y=PctGrowth)) +
  geom_point()
```

1.  Describe the model you are currently using, how it performs for predictions and what the 2025 projections are under this model. Be sure to describe how you obtained the 2025 predictions. Company Growth Forecasting Problem Background Growth = β0 + β1Income + β2Production + β3Savings + β4Unemployment + ϵi ϵi iid ∼ N (0, σ2)

    ```{r}
    # basic linear model
    growth.lm <- lm(PctGrowth ~ Income + Production + Savings + Unemployment, data=data)

    data %>%
      ggplot(aes(x = date, y = PctGrowth)) +
      geom_point() +
      geom_line(aes(y = growth.lm$fitted.values), col = 'red')

    # lm models for each predictor
    new_data <- data.frame(Year = 2025,
                           Qrtr = c(1,2,3,4))
    income.lm <- lm(Income~Year+Qrtr, data=data)
    income_lm_preds <- predict(income.lm, newdata = new_data)
    production.lm <- lm(Production~Year+Qrtr, data=data)
    production_lm_preds <- predict(production.lm, newdata = new_data)
    savings.lm <- lm(Savings~Year+Qrtr, data=data)
    savings_lm_preds <- predict(savings.lm, newdata = new_data)
    unemployment.lm <- lm(Unemployment~Year+Qrtr, data=data)
    unemployment_lm_preds <- predict(unemployment.lm, newdata = new_data)

    # predict growth
    growth_new_data <- data.frame(Income = income_lm_preds,
                                  Production = production_lm_preds,
                                  Savings = savings_lm_preds,
                                  Unemployment = unemployment_lm_preds)
    lm_preds <- predict(growth.lm, growth_new_data)
    lm_preds

    ## how well does our model predicts
    # r^2
    lm_r2 <- summary(growth.lm)$r.squared
    lm_r2
    # rmse
    lm_rmse <- sqrt(mean(residuals(growth.lm)^2))
    lm_rmse
    ```

2.  Describe at least 2 alternative models that could be used to do the projections and emphasize how they differ from the current method.

    ```{r}
    # new linear model accounting for date features and maybe with spline and what not
    data_date_features <- data %>%
      mutate(Year = year(date),
             Month = month(date, label = TRUE),
             DOW = wday(date, label = TRUE),
             Numeric_date = decimal_date(date))

    spline_model <- lm(PctGrowth ~ bs(Numeric_date, knots = c(1975, 1990, 2005, 2020), 
                                      degree = 3) +., data = data_date_features)

    data_date_features %>%
    ggplot(aes(x = date, y = PctGrowth)) +
    geom_point() +
    geom_line(aes(y = spline_model$fitted.values), col = 'red')

    future_dates <- seq(from = as.yearqtr("2025 Q1"), to = as.yearqtr("2025 Q4"), by = 1/4)
    future_dates <- as.Date(as.yearqtr(future_dates), frac = 0)
    future_features <- tibble(date = future_dates) %>%
      mutate(Year = year(date),
        Month = month(date, label = TRUE),
        DOW = wday(date, label = TRUE),
        Numeric_date = decimal_date(date),
        Qrtr = quarter(date, with_year = FALSE, fiscal_start = 1),
        Income = income_lm_preds,
        Production = production_lm_preds,
        Savings = savings_lm_preds,
        Unemployment = unemployment_lm_preds)

    spline_preds <- predict(spline_model, newdata = future_features)
    spline_preds

    spline_r2 <- summary(spline_model)$r.squared
    spline_r2

    spline_rmse <- sqrt(mean(residuals(spline_model)^2))
    spline_rmse
    # facebook prophet (maybe or maybe not this one because it won't account for other variables)
    prophet_df <- data %>%
      rename(y = PctGrowth, ds = date) %>% 
      dplyr::select(y, ds)
    prophet_model <- prophet_model <- prophet(prophet_df, yearly.seasonality = TRUE, 
                                              weekly.seasonality = TRUE,
                                              daily.seasonality = TRUE)
    prophet_fitted <- predict(prophet_model) %>% pull(yhat)

    prophet_df %>%
      ggplot(aes(x = ds, y = y)) +
      geom_point() +
      geom_line(aes(y = prophet_fitted), col = 'red')

    prophet_future <- future_features %>%
      rename(ds = date) %>%
      dplyr::select(ds)
    prophet_preds <- predict(prophet_model, prophet_future)$yhat
    prophet_preds

    prophet_r2 <- 1 - sum((prophet_df$y - prophet_fitted)^2) / 
      sum((prophet_df$y - mean(prophet_df$y))^2)
    prophet_r2

    prophet_rmse <- sqrt(mean((prophet_df$y - prophet_fitted)^2))
    prophet_rmse
    ```

    ```{r}
    # ARIMA
    ## Define response as time series object with a frequency S
    ts_data <- ts(data=data$PctGrowth, frequency=4)
    X_noInt <- model.matrix(growth.lm)[,-1]
    arima_model <- auto.arima(y=ts_data,xreg=X_noInt)

    data %>%
      ggplot(aes(x = date, y = PctGrowth)) +
      geom_point() +
      geom_line(aes(y = fitted(arima_model)), col = 'red')

    x_future <- model.matrix(growth.lm, data = data)[,-1]
    arima_preds <- forecast(arima_model, xreg = x_future, level = 95)$mean


    arima_r2 <- cor(fitted(arima_model), data$PctGrowth)^2
    arima_r2

    arima_rmse <- rmse_vec(data$PctGrowth, fitted(arima_model))
    arima_rmse
    ```

3.  Compare these 2 new methods to the current method in terms of ability to predict and the 2025 projections. Be sure to describe how you obtained the 2025 predictions. (predict for all variables, not just the response)

    ```{r}
    # Basic lm model
    data %>%
      ggplot(aes(x = date, y = PctGrowth)) +
      geom_point() +
      geom_line(aes(y = growth.lm$fitted.values), col = 'red')

    print(paste('R2 value:', lm_r2))
    print(paste('RMSE:', lm_rmse))
    ```

    ## CV

    ```{r}
    # lm
    cv <- function(fold_num){
      ## Split into train-validation sets
      validationSet <- data %>%
        filter(folds==fold_num)
      trainSet <- data %>%
        filter(folds!=fold_num)
      
      # Ensure factors have at least two levels (drop unused levels)
      trainSet <- droplevels(trainSet)
      validationSet <- droplevels(validationSet)

      ## Fit a model and predict
      trainModel <- lm(PctGrowth~., data = trainSet)
      preds <- predict.lm(trainModel, newdata=validationSet)

      ## Validate the predictions
      rmse <- yardstick::rmse_vec(truth=validationSet$PctGrowth, estimate=preds)
      
      return(rmse)
    }

    K <- 25
    folds <- rep(1:K, length = nrow(data)) %>%
      sample()
    rmse_results <- sapply(1:K, FUN=cv)
    my_hist <- ggplot() + 
      geom_histogram(mapping=aes(x=rmse_results)) +
      ggtitle("My LM")
    paste0('Ave lm rmse: ', mean(rmse_results))

    # spline
    cv <- function(fold_num){
      ## Split into train-validation sets
      validationSet <- data_date_features %>%
        filter(folds==fold_num)
      trainSet <- data_date_features %>%
        filter(folds!=fold_num)
      
      # Ensure factors have at least two levels (drop unused levels)
      trainSet <- droplevels(trainSet)
      validationSet <- droplevels(validationSet)

      ## Fit a model and predict
      trainModel <- lm(PctGrowth~bs(Numeric_date, knots = c(1975, 1990, 2005, 2020), degree = 3) + ., data = trainSet)
      preds <- predict.lm(trainModel, newdata=validationSet)

      ## Validate the predictions
      rmse <- yardstick::rmse_vec(truth=validationSet$PctGrowth, estimate=preds)
      
      return(rmse)
    }

    K <- 25
    folds <- rep(1:K, length = nrow(data_date_features)) %>%
      sample()
    rmse_results <- sapply(1:K, FUN=cv)
    my_hist <- ggplot() + 
      geom_histogram(mapping=aes(x=rmse_results)) +
      ggtitle("Spline Model")
    paste0('Ave spline rmse: ', mean(rmse_results))

    # arima
    train <- data %>%
      filter(date<as.Date('2015-01-01'))
    test <- train <- data %>%
      filter(date>=as.Date('2015-01-01'))

    X_train <- X_noInt[data$date<as.Date('2015-01-01'),]
    X_validate <- X_noInt[data$date>=as.Date('2015-01-01'),]
    train.ts <- ts(data=train$PctGrowth, frequency = 4)
    train.arima <- auto.arima(y=train.ts,xreg = X_train)

    # predictions
    arima.preds <- forecast(train.arima,xreg=X_validate,level=95)$mean
    arima.fitted <- fitted(train.arima)

    #rmse
    arima.data <- tibble(truth=test$PctGrowth,estimate=arima.preds)
    arima.rmse <- rmse(data=arima.data,truth=truth,estimate=estimate)
    ```

4.  The board is particularly interested to know how Income, Production, Savings and Unemployment relate to company growth. Use your preferred method (among the 3 or more you consider here) to illustrate this relationship.

```{r}
summary(train.arima)
```

```{r}

```
